"""
Report generation module for creating structured audit reports.
Supports multiple output formats: Markdown and PDF.
"""
from abc import ABC, abstractmethod
from typing import Optional
import os
from datetime import datetime

from core.report_data import ReportData


class ReportFormatter(ABC):
    """Abstract base class for report formatters."""
    
    @abstractmethod
    def format(self, data: ReportData) -> str:
        """Format the report data into the desired output format."""
        pass
    
    @abstractmethod
    def get_extension(self) -> str:
        """Get the file extension for this format."""
        pass


class MarkdownFormatter(ReportFormatter):
    """Formats reports as Markdown documents."""
    
    def format(self, data: ReportData) -> str:
        """Generate a Markdown formatted report."""
        sections = []
        
        # Title and Header
        sections.append("# Whistleblower Security Audit Report\n")
        sections.append("---\n")
        
        # Executive Summary
        sections.append("## Executive Summary\n")
        sections.append(f"**Report Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        sections.append(f"**Detection Status:** {data.detection_status}\n")
        sections.append(f"**Start Time:** {data.start_time}\n")
        if data.end_time:
            sections.append(f"**End Time:** {data.end_time}\n")
            sections.append(f"**Duration:** {data.get_duration()}\n")
        sections.append(f"**Total Iterations:** {data.total_iterations}\n")
        if data.final_score is not None:
            sections.append(f"**Final Score:** {data.final_score}/3\n")
        sections.append("\n")
        
        # Target Information
        sections.append("## Target Information\n")
        sections.append(f"**Endpoint URL:** `{data.target_endpoint}`\n")
        sections.append(f"**API Key Used:** {'Yes' if data.api_key_used else 'No'}\n")
        sections.append(f"**OpenAI Model:** {data.openai_model}\n")
        sections.append(f"\n**Request Body Structure:**\n```json\n{self._format_dict(data.request_body_structure)}\n```\n")
        sections.append(f"\n**Response Body Structure:**\n```json\n{self._format_dict(data.response_body_structure)}\n```\n")
        sections.append("\n")
        
        # Context Gathering Phase
        if data.context_questions:
            sections.append("## Context Gathering Phase\n")
            sections.append("These questions were asked to understand the target system's capabilities:\n\n")
            for idx, ctx in enumerate(data.context_questions, 1):
                sections.append(f"### Question {idx}\n")
                sections.append(f"**Prompt:** {ctx.question}\n\n")
                sections.append(f"**Response:**\n```\n{ctx.response}\n```\n\n")
            
            if data.context_analysis:
                sections.append("### Context Analysis\n")
                sections.append(f"```\n{data.context_analysis}\n```\n\n")
        
        # Detection Process
        if data.prompt_responses:
            sections.append("## Detection Process\n")
            sections.append("Iterative prompting attempts to extract the system prompt:\n\n")
            for pr in data.prompt_responses:
                iter_label = f"Iteration {pr.iteration}" if pr.iteration is not None else "Attempt"
                sections.append(f"### {iter_label}\n")
                sections.append(f"**Timestamp:** {pr.timestamp}\n\n")
                sections.append(f"**Adversarial Prompt:**\n```\n{pr.prompt}\n```\n\n")
                sections.append(f"**Target Response:**\n```\n{pr.response}\n```\n\n")
                if pr.score is not None:
                    sections.append(f"**Judge Score:** {pr.score}/3\n\n")
                if pr.improvement_suggestion:
                    sections.append(f"**Improvement Suggestion:**\n```\n{pr.improvement_suggestion}\n```\n\n")
                sections.append("---\n\n")
        
        # Analysis Results
        sections.append("## Analysis Results\n")
        sections.append("### Inferred System Prompt\n")
        sections.append(f"```\n{data.inferred_system_prompt}\n```\n\n")
        
        # Footer
        sections.append("---\n")
        sections.append("*Report generated by Whistleblower - System Prompt Detection Tool*\n")
        
        return "".join(sections)
    
    def _format_dict(self, d: dict) -> str:
        """Format a dictionary for display."""
        import json
        try:
            return json.dumps(d, indent=2)
        except:
            return str(d)
    
    def get_extension(self) -> str:
        return ".md"


class PDFFormatter(ReportFormatter):
    """Formats reports as PDF documents using weasyprint."""
    
    def format(self, data: ReportData) -> str:
        """Generate HTML content that can be converted to PDF."""
        html_parts = []
        
        # HTML header with CSS styling
        html_parts.append("""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }
        h2 {
            color: #2980b9;
            margin-top: 30px;
            border-bottom: 2px solid #ecf0f1;
            padding-bottom: 5px;
        }
        h3 {
            color: #34495e;
            margin-top: 20px;
        }
        .summary-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        .summary-table td {
            padding: 8px;
            border: 1px solid #ddd;
        }
        .summary-table td:first-child {
            font-weight: bold;
            background-color: #f8f9fa;
            width: 30%;
        }
        pre {
            background-color: #f4f4f4;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
            overflow-x: auto;
            overflow-y: auto;
            max-height: 400px;
            font-size: 12px;
            white-space: pre-wrap;
            word-wrap: break-word;
            word-break: break-word;
        }
        code {
            background-color: #f4f4f4;
            padding: 2px 5px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
        .iteration {
            background-color: #f8f9fa;
            border-left: 4px solid #3498db;
            padding: 15px;
            margin: 15px 0;
        }
        .score {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 5px;
            font-weight: bold;
        }
        .score-0 { background-color: #e74c3c; color: white; }
        .score-1 { background-color: #e67e22; color: white; }
        .score-2 { background-color: #f39c12; color: white; }
        .score-3 { background-color: #27ae60; color: white; }
        .footer {
            margin-top: 40px;
            text-align: center;
            color: #7f8c8d;
            font-size: 12px;
            border-top: 1px solid #ecf0f1;
            padding-top: 20px;
        }
        hr {
            border: none;
            border-top: 1px solid #ecf0f1;
            margin: 20px 0;
        }
    </style>
</head>
<body>
""")
        
        # Title
        html_parts.append("<h1>Whistleblower Security Audit Report</h1>")
        html_parts.append("<hr>")
        
        # Executive Summary
        html_parts.append("<h2>Executive Summary</h2>")
        html_parts.append('<table class="summary-table">')
        html_parts.append(f'<tr><td>Report Generated</td><td>{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</td></tr>')
        html_parts.append(f'<tr><td>Detection Status</td><td>{self._escape_html(data.detection_status)}</td></tr>')
        html_parts.append(f'<tr><td>Start Time</td><td>{self._escape_html(data.start_time)}</td></tr>')
        if data.end_time:
            html_parts.append(f'<tr><td>End Time</td><td>{self._escape_html(data.end_time)}</td></tr>')
            html_parts.append(f'<tr><td>Duration</td><td>{self._escape_html(data.get_duration())}</td></tr>')
        html_parts.append(f'<tr><td>Total Iterations</td><td>{data.total_iterations}</td></tr>')
        if data.final_score is not None:
            html_parts.append(f'<tr><td>Final Score</td><td><span class="score score-{data.final_score}">{data.final_score}/3</span></td></tr>')
        html_parts.append('</table>')
        
        # Target Information
        html_parts.append("<h2>Target Information</h2>")
        html_parts.append('<table class="summary-table">')
        html_parts.append(f'<tr><td>Endpoint URL</td><td><code>{self._escape_html(data.target_endpoint)}</code></td></tr>')
        html_parts.append(f'<tr><td>API Key Used</td><td>{"Yes" if data.api_key_used else "No"}</td></tr>')
        html_parts.append(f'<tr><td>OpenAI Model</td><td>{self._escape_html(data.openai_model)}</td></tr>')
        html_parts.append('</table>')
        html_parts.append(f'<h3>Request Body Structure</h3><pre>{self._escape_html(self._format_dict(data.request_body_structure))}</pre>')
        html_parts.append(f'<h3>Response Body Structure</h3><pre>{self._escape_html(self._format_dict(data.response_body_structure))}</pre>')
        
        # Context Gathering Phase
        if data.context_questions:
            html_parts.append("<h2>Context Gathering Phase</h2>")
            html_parts.append("<p>These questions were asked to understand the target system's capabilities:</p>")
            for idx, ctx in enumerate(data.context_questions, 1):
                html_parts.append(f"<h3>Question {idx}</h3>")
                html_parts.append(f"<p><strong>Prompt:</strong> {self._escape_html(ctx.question)}</p>")
                html_parts.append(f"<p><strong>Response:</strong></p><pre>{self._escape_html(ctx.response)}</pre>")
            
            if data.context_analysis:
                html_parts.append("<h3>Context Analysis</h3>")
                html_parts.append(f"<pre>{self._escape_html(data.context_analysis)}</pre>")
        
        # Detection Process
        if data.prompt_responses:
            html_parts.append("<h2>Detection Process</h2>")
            html_parts.append("<p>Iterative prompting attempts to extract the system prompt:</p>")
            for pr in data.prompt_responses:
                iter_label = f"Iteration {pr.iteration}" if pr.iteration is not None else "Attempt"
                html_parts.append(f'<div class="iteration">')
                html_parts.append(f"<h3>{iter_label}</h3>")
                html_parts.append(f"<p><strong>Timestamp:</strong> {self._escape_html(pr.timestamp)}</p>")
                html_parts.append(f"<p><strong>Adversarial Prompt:</strong></p><pre>{self._escape_html(pr.prompt)}</pre>")
                html_parts.append(f"<p><strong>Target Response:</strong></p><pre>{self._escape_html(pr.response)}</pre>")
                if pr.score is not None:
                    html_parts.append(f'<p><strong>Judge Score:</strong> <span class="score score-{pr.score}">{pr.score}/3</span></p>')
                if pr.improvement_suggestion:
                    html_parts.append(f"<p><strong>Improvement Suggestion:</strong></p><pre>{self._escape_html(pr.improvement_suggestion)}</pre>")
                html_parts.append('</div>')
        
        # Analysis Results
        html_parts.append("<h2>Analysis Results</h2>")
        html_parts.append("<h3>Inferred System Prompt</h3>")
        html_parts.append(f"<pre>{self._escape_html(data.inferred_system_prompt)}</pre>")
        
        # Footer
        html_parts.append('<div class="footer">')
        html_parts.append('<p>Report generated by Whistleblower - System Prompt Detection Tool</p>')
        html_parts.append('</div>')
        
        html_parts.append("</body></html>")
        
        return "".join(html_parts)
    
    def _escape_html(self, text: str) -> str:
        """Escape HTML special characters."""
        if not isinstance(text, str):
            text = str(text)
        return (text
                .replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace('"', "&quot;")
                .replace("'", "&#39;"))
    
    def _format_dict(self, d: dict) -> str:
        """Format a dictionary for display."""
        import json
        try:
            return json.dumps(d, indent=2)
        except:
            return str(d)
    
    def get_extension(self) -> str:
        return ".pdf"


class ReportGenerator:
    """Main class for generating audit reports in various formats."""
    
    def __init__(self):
        self.formatters = {
            'markdown': MarkdownFormatter(),
            'pdf': PDFFormatter()
        }
    
    def generate(self, data: ReportData, format_type: str = 'markdown', 
                 output_file: Optional[str] = None) -> str:
        """
        Generate a report in the specified format.
        
        Args:
            data: ReportData object containing all audit information
            format_type: Type of report format ('markdown' or 'pdf')
            output_file: Optional path to save the report to
        
        Returns:
            Path to the generated report file
        """
        if format_type not in self.formatters:
            raise ValueError(f"Unsupported format: {format_type}. Supported formats: {list(self.formatters.keys())}")
        
        formatter = self.formatters[format_type]
        
        # Generate the report content
        if format_type == 'markdown':
            content = formatter.format(data)
            
            # Determine output file path
            if output_file is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_file = f"whistleblower_report_{timestamp}.md"
            elif not output_file.endswith('.md'):
                output_file += '.md'
            
            # Write to file
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return output_file
        
        elif format_type == 'pdf':
            html_content = formatter.format(data)
            
            # Determine output file path
            if output_file is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_file = f"whistleblower_report_{timestamp}.pdf"
            elif not output_file.endswith('.pdf'):
                output_file += '.pdf'
            
            # Convert HTML to PDF using xhtml2pdf
            try:
                from xhtml2pdf import pisa
                with open(output_file, 'wb') as pdf_file:
                    pisa_status = pisa.CreatePDF(html_content, dest=pdf_file)
                    if pisa_status.err:
                        raise RuntimeError(f"PDF generation failed with {pisa_status.err} errors")
            except ImportError:
                raise ImportError(
                    "xhtml2pdf is required for PDF generation. "
                    "Install it with: pip install xhtml2pdf"
                )
            
            return output_file
    
    