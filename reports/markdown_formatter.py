"""
Markdown formatter for report generation.
"""
import json
from datetime import datetime
from reports.base_formatter import BaseFormatter
from core.report_data import ReportData


class MarkdownFormatter(BaseFormatter):
    """Formats reports as Markdown documents."""
    
    def format(self, data: ReportData) -> str:
        """Generate a Markdown formatted report."""
        sections = []
        
        # Title and Header
        sections.append("# Whistleblower Security Audit Report\n")
        sections.append("---\n")
        
        # Executive Summary
        executive_summary = f"""## Executive Summary
**Report Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Detection Status:** {data.detection_status}
**Start Time:** {data.start_time}"""
        
        if data.end_time:
            executive_summary += f"""
**End Time:** {data.end_time}
**Duration:** {data.get_duration()}"""
        
        executive_summary += f"""
**Total Iterations:** {data.total_iterations}"""
        
        if data.final_score is not None:
            executive_summary += f"""
**Final Score:** {data.final_score}/3"""
        
        executive_summary += "\n\n"
        sections.append(executive_summary)
        
        # Target Information
        target_info = f"""## Target Information
**Endpoint URL:** `{data.target_endpoint}`
**Model:** {data.model}

**Request Body Structure:**
```json
{self._format_dict(data.request_body_structure)}
```

**Response Body Structure:**
```json
{self._format_dict(data.response_body_structure)}
```

"""
        sections.append(target_info)
        
        # Context Gathering Phase
        if data.context_questions:
            context_section = """## Context Gathering Phase
These questions were asked to understand the target system's capabilities:

"""
            sections.append(context_section)
            
            for idx, ctx in enumerate(data.context_questions, 1):
                question_block = f"""### Question {idx}
**Prompt:** {ctx.question}

**Response:**
```
{ctx.response}
```

"""
                sections.append(question_block)
            
            if data.context_analysis:
                analysis_block = f"""### Context Analysis
```
{data.context_analysis}
```

"""
                sections.append(analysis_block)
        
        # Detection Process
        if data.prompt_responses:
            detection_header = """## Detection Process
Iterative prompting attempts to extract the system prompt:

"""
            sections.append(detection_header)
            
            for pr in data.prompt_responses:
                iter_label = f"Iteration {pr.iteration}" if pr.iteration is not None else "Attempt"
                
                detection_block = f"""### {iter_label}
**Timestamp:** {pr.timestamp}

**Adversarial Prompt:**
```
{pr.prompt}
```

**Target Response:**
```
{pr.response}
```

"""
                if pr.score is not None:
                    detection_block += f"**Judge Score:** {pr.score}/3\n\n"
                
                if pr.improvement_suggestion:
                    detection_block += f"""**Improvement Suggestion:**
```
{pr.improvement_suggestion}
```

"""
                
                detection_block += "---\n\n"
                sections.append(detection_block)
        
        # Analysis Results
        analysis_results = f"""## Analysis Results
### Inferred System Prompt
```
{data.inferred_system_prompt}
```

"""
        sections.append(analysis_results)
        
        # Footer
        footer = """---
*Report generated by Whistleblower - System Prompt Detection Tool*
"""
        sections.append(footer)
        
        return "".join(sections)
    
    def _format_dict(self, d: dict) -> str:
        """Format a dictionary for display."""
        try:
            return json.dumps(d, indent=2)
        except:
            return str(d)
    
    def get_extension(self) -> str:
        return ".md"
    
    def get_mime_type(self) -> str:
        return "text/markdown"